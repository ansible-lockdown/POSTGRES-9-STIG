---
#DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.
#
#This material is based upon work supported by the Department of the Air Force and MISSILE DEFENSE AGENCY under Air Force Contract No. FA8702-15-D-0001. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Department of the Air Force and MISSILE DEFENSE AGENCY.
#
#Â© 2023 Massachusetts Institute of Technology.
#
#The software/firmware is provided to you on an As-Is basis
#
#Delivered to the U.S. Government with Unlimited Rights, as defined in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any copyright notice, U.S. Government rights in this work are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this work other than as specifically authorized by the U.S. Government may violate any copyrights that exist in this work.

- name: "HIGH | PGS9-00-000300 | Security-relevant software updates to PostgreSQL must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."
  block:
      - name: "HIGH | PGS9-00-000300 | Security-relevant software updates to PostgreSQL must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs). | RHEL7 Install"
        yum:
            name: "{{ pgs9stig_postgres_packages }}"
            state: latest
            security: true
        when: ansible_facts.distribution_major_version == "7"

      - name: "HIGH | PGS9-00-000300 | Security-relevant software updates to PostgreSQL must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs). | RHEL8 Install"
        dnf:
            name: "{{ pgs9stig_postgres_packages }}"
            state: latest
            security: true
        when: ansible_facts.distribution_major_version == "8"
  when: pgs9_00_000300
  tags:
      - PGS9-00-000300


- name: |
      "HIGH | PGS9-00-008000 | PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to generate and validate cryptographic hashes."
      "HIGH | PGS9-00-008200 | PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owners requirements."
  block:
      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to generate and validate cryptographic hashes."
        yum:
            name: dracut-fips
            state: present
        notify: rebuild initramfs

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | AUDIT | Check if prelink package is installed"
        command: rpm -q prelink
        args:
            warn: no
        changed_when: no
        failed_when: no
        check_mode: no
        register: pgs9_00_008000_prelink_installed

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | PATCH | Disable prelinking."
        lineinfile:
            dest: /etc/sysconfig/prelink
            regexp: ^#?PRELINKING
            line: PRELINKING=no
        when: pgs9_00_008000_prelink_installed.rc == 0
        notify: undo existing prelinking

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | AUDIT | Check for GRUB_CMDLINE_LINUX in /etc/default/grub"
        command: grep -P '^\s*GRUB_CMDLINE_LINUX=".*"$' /etc/default/grub
        check_mode: no
        failed_when: no
        changed_when: pgs9_00_008000_default_grub_missing_audit.rc > 0
        register: pgs9_00_008000_default_grub_missing_audit

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | AUDIT | parse sane GRUB_CMDLINE_LINUX from /proc/cmdline"
        command: grep -oP ' ro \K.*?(?= ?LANG=)' /proc/cmdline
        check_mode: no
        changed_when: no
        failed_when: pgs9_00_008000_grub_cmdline_linux_audit.rc > 1
        when: pgs9_00_008000_default_grub_missing_audit is changed
        register: pgs9_00_008000_grub_cmdline_linux_audit

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | PATCH | Copy over a sane /etc/default/grub"
        template:
            src: etc_default_grub.j2
            dest: /etc/default/grub
            owner: root
            group: root
            mode: 0644
        vars:
            grub_cmdline_linux: "{{ pgs9_00_008000_grub_cmdline_linux_audit.stdout }}"
        when: pgs9_00_008000_default_grub_missing_audit is changed

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | PATCH | fips=1 must be in /etc/default/grub"
        replace:
            path: /etc/default/grub
            regexp: "{{ pgs9stig_regexp_quoted_params }}"
            replace: "{{ pgs9stig_replace_quoted_params }}"
        vars:
            key: GRUB_CMDLINE_LINUX
            param: fips
            value: 1
            append: yes  # this is the default
        when:
            - not ansible_check_mode or
              pgs9_00_008000_default_grub_missing_audit is not changed
        notify: make grub2 config

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | PATCH | If /boot or /boot/efi reside on separate partitions, the kernel parameter boot=<partition> must be added to the kernel command line."
        replace:
            path: /etc/default/grub
            regexp: "{{ pgs9stig_regexp_quoted_params }}"
            replace: "{{ pgs9stig_replace_quoted_params }}"
        with_items:
            - "{{ ansible_mounts | json_query(query) }}"
        vars:
            query: "[?mount=='{{ pgs9stig_boot_part }}'] | [0]"
            key: GRUB_CMDLINE_LINUX
            param: boot
            value: UUID={{ item.uuid }}
            insert: yes
        when:
            - pgs9stig_boot_part not in ['/', '']
            - not ansible_check_mode or
              pgs9_00_008000_default_grub_missing_audit is not changed
        notify: make grub2 config
        register: result

      - name: "HIGH | PGS9-00-008000 PGS9-00-008200 | AUDIT | Verify kernel parameters in /etc/default/grub"
        command: grep -P '^\s*GRUB_CMDLINE_LINUX=".*(?<=[" ]){{ item | regex_escape }}(?=[" ]).*"$' /etc/default/grub
        check_mode: no
        with_items:
            - fips=1
            - boot=UUID={{ ansible_mounts | json_query(query) }}
        vars:
            query: "[?mount=='{{ pgs9stig_boot_part }}'].uuid | [0]"
        register: pgs9_00_008000_audit
        when:
            - not ansible_check_mode or
              pgs9_00_008000_default_grub_missing_audit is not changed
            - pgs9stig_boot_part not in ['/', ''] or
              'boot=' not in item
        changed_when:
            - ansible_check_mode
            - pgs9_00_008000_audit is failed
        failed_when:
            - pgs9_00_008000_audit is failed
            - not ansible_check_mode or
              pgs9_00_008000_audit.rc > 1
  when:
      - pgs9_00_008000 or
        pgs9_00_008200
  tags:
      - PGS9-00-008000
      - PGS9-00-008200


- name: "HIGH | PGS9-00-010200 | PostgreSQL must enforce authorized access to all PKI private keys stored/utilized by PostgreSQL."
  block:
      - name: "HIGH | PGS9-00-010200 | AUDIT | PostgreSQL must enforce authorized access to all PKI private keys stored/utilized by PostgreSQL."
        command: "true"
        register: pgs9_00_010200_audit
        check_mode: no
        changed_when: no
        with_items:
            - not implemented
      - name: "HIGH | PGS9-00-010200 | PATCH | PostgreSQL must enforce authorized access to all PKI private keys stored/utilized by PostgreSQL."
        command: "true"
        changed_when: no
        with_items:
            - not implemented
  when: pgs9_00_010200
  tags:
      - PGS9-00-010200
      - notimplemented

- name: "HIGH | PGS9-00-011700 | PostgreSQL must prevent non-privileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures."
  block:
      - name: "HIGH | PGS9-00-011700 | AUDIT | PostgreSQL must prevent non-privileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures."
        command: "true"
        register: pgs9_00_011700_audit
        check_mode: no
        changed_when: no
        with_items:
            - not implemented
      - name: "HIGH | PGS9-00-011700 | PATCH | PostgreSQL must prevent non-privileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures."
        command: "true"
        changed_when: no
        with_items:
            - not implemented
  when: pgs9_00_011700
  tags:
      - PGS9-00-011700
      - notimplemented


- name: "HIGH | PGS9-00-012300 | PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for cryptographic operations."
  block:
      - name: "HIGH | PGS9-00-012300 | PATCH | PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for cryptographic operations."
        yum:
            name: openssl

      - name: "HIGH | PGS9-00-012300 | AUDIT | Check for FIPS validated version of openssl"
        shell: openssl version | grep 'fips'
        register: pgs9stig_openssl_fips_check
        failed_when: no
        changed_when: pgs9stig_openssl_fips_check.rc != 0

      - debug:
            msg: CAT 1 Finding non-FIPS validated version of openssl found
        changed_when: yes
        when: pgs9stig_openssl_fips_check is changed
  when:
      - pgs9_00_012300
  tags:
      - PGS9-00-012300


- name: "HIGH | PGS9-00-012800 | The DBMS must be configured on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL."
  debug:
      msg: CAT 1 Finding, non RHEL system
  changed_when: yes
  when:
      - pgs9_00_012800
      - ansible_distribution != "RedHat"
  tags:
      - PGS9-00-012800
